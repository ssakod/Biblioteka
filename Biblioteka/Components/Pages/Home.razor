@page "/"
@using System.IO
@using System.Diagnostics
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="visualSettingShapka">
    <input type="text" class="CreateNewFolder-input" @bind="newFolderName" placeholder="Введите имя папки" />
    <button @onclick="CreateNewFolder" class="CreateNewFolder-btn">Создать новую папку</button> @*тут*@
    <InputFile OnChange="OnFileSelected" />
    <button @onclick="UploadFile" class="btn btn-secondary">Загрузить</button>
</div>

<div> 
    <label>Введите путь к файлу:</label>
    <input @bind="directoryPath" placeholder="C:\Path\To\Directory" />
    <button @onclick="LoadDirectory">Загрузить</button>
</div>

<div>
    <button @onclick="CreateNewFolder" class="btn btn-secondary">Создать папку</button>
    <InputFile OnChange="OnFileSelected" />
    <button @onclick="UploadFile" class="btn btn-secondary">Загрузить файл</button>
</div>

<div style="display: flex; gap: 20px;">
    <div class="visualSettingList">
        @if (directoryContents != null)
        {
            <table class="table">
                <thead>
                    <tr>
                        <th style="width: 400px;">Имя файла</th>
                        <th>Тип</th>
                        <th>Размер</th>
                        <th>Дата изменения</th>
                    </tr>
                </thead>
                <tbody>
                    <tr @onclick="OnBackClick">
                        <td>../</td>
                    </tr>
                    @foreach (var item in directoryContents)
                    {
                        <tr @onclick="() => OnItemClick(item)">
                            <td style="max-width: 400px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                @item.Name
                            </td>
                            <td>@(item.IsDirectory ? "Папка" : "Файл")</td>
                            <td>@(item.IsDirectory ? "" : FormatSize(item.Size))</td>
                            <td>@item.LastModified.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
    <div style="flex: 2; max-width: 60vw; height: 700px; overflow-y: auto; border: 1px solid #ddd; padding: 10px;">
        @if (isPdf)
        {
            <embed src="@($"Library/{Path.GetFileName(selectedFilePath)}")"
                   style="width: 100%; height: 100%;" />
        }
        else if (selectedFileContent != null)
        {
            <h4>Содержимое файла:</h4>
            <pre>@selectedFileContent</pre>
        }
    </div>


@code {
    private int currentCount = 0;
    private string? directoryPath = @"C:\Users\dok4s\source\repos\Biblioteka\Biblioteka\wwwroot\Library";
    private List<DirectoryItem> directoryContents;
    private string? selectedFileContent;
    private IBrowserFile? selectedFile;
    private string? selectedFilePath;
    private bool isPdf;

    private async Task LoadDirectory()
    {
        if (Directory.Exists(directoryPath))
        {
            directoryContents = new List<DirectoryItem>();
            foreach (var dir in Directory.GetDirectories(directoryPath))
            {
                var dirInfo = new DirectoryInfo(dir);
                directoryContents.Add(new DirectoryItem
                    {
                        Name = dirInfo.Name,
                        IsDirectory = true,
                        LastModified = dirInfo.LastWriteTime
                    });
            }
            foreach (var file in Directory.GetFiles(directoryPath))
            {
                var fileInfo = new FileInfo(file);
                directoryContents.Add(new DirectoryItem
                    {
                        Name = fileInfo.Name,
                        IsDirectory = false,
                        Size = fileInfo.Length,
                        LastModified = fileInfo.LastWriteTime
                    });
            }
        }
        else
        {
            directoryContents = null;
        }
    }

    private void OnBackClick()
    {
        directoryPath = string.Join(@"\", directoryPath.Split(@"\").SkipLast(1)) + @"/";
        LoadDirectory();
    }

    private string FormatSize(long size)
    {
        string[] sizes = { "Б", "КБ", "МБ", "ГБ", "ТБ" };
        int order = 0;
        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }
        return $"{size:0.##} {sizes[order]}";
    }

    private async Task CreateNewFolder()
    {
        if (!string.IsNullOrEmpty(directoryPath) && !string.IsNullOrEmpty(newFolderName))
        {
            var newFolderPath = Path.Combine(directoryPath, "Новая папка");
            Directory.CreateDirectory(newFolderPath);
            newFolderName = "";  // Очищаем поле ввода после создания папки
            await LoadDirectory();  // Перезагружаем содержимое директории
        }
        else
        {
            // Обработка случая, если не задано имя папки
            Console.WriteLine("Please enter a valid folder name.");
        }
    }

    private async Task UploadFile()
    {
        if (selectedFile != null && !string.IsNullOrEmpty(directoryPath))
        {
            var filePath = Path.Combine(directoryPath, selectedFile.Name);
            using (var stream = selectedFile.OpenReadStream())
            using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                await stream.CopyToAsync(fileStream);
            }
            await LoadDirectory();  // Перезагружаем содержимое директории
        }
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private class DirectoryItem
    {
        public string Name { get; set; }
        public bool IsDirectory { get; set; }
        public long Size { get; set; }
        public DateTime LastModified { get; set; }
    }

    private void OnItemClick(DirectoryItem item)
    {
        var fullPath = Path.Combine(directoryPath, item.Name);
        var extension = Path.GetExtension(item.Name).ToLower();

        if (item.IsDirectory)
        {
            directoryPath = fullPath;
            LoadDirectory();
        }
        else
        {
            selectedFileContent = null; // Reset text content
            selectedFilePath = null;    // Reset PDF path
            isPdf = false;              // Reset flag

            if (extension == ".txt")
            {
                selectedFileContent = File.ReadAllText(fullPath);
            }
            else if (extension == ".pdf")
            {
                selectedFilePath = fullPath;
                isPdf = true;
            }
            else if (extension == ".docx")
            {
                selectedFileContent = ReadDocxContent(fullPath);
            }
        }
    }

    private string ReadDocxContent(string filePath)
    {
        using (var doc = Xceed.Words.NET.DocX.Load(filePath))
        {
            return string.Join("\n", doc.Paragraphs.Select(p => p.Text));
        }
    }

}
