@page "/"
@using System.IO
@using System.Diagnostics
@using AntDesign.TableModels
@using Microsoft.AspNetCore.Components.Forms
@using AntDesign
@using System.ComponentModel
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@inherits ComponentBase

<div class="visualSettingShapka">
    <Input Placeholder="Введите имя папки" @bind-Value="newFolderName" Style="width: 300px;" />
    <Button Type="ButtonType.Primary" OnClick="CreateNewFolder">Создать папку</Button>
    <Upload OnChange="(e) => OnFileSelected(e)"/>
    <Button Type="ButtonType.Default" OnClick="UploadFile">Загрузить</Button>
</div>

<Button Type="ButtonType.Default" Id="backBtn" OnClick="OnBack">Назад</Button>
<div style="display: flex; gap: 20px;">
    <div class="visualSettingList">
        @if (directoryContents != null)
        {
            <Table TItem="DirectoryItem" HidePagination="true" OnRow="OnRow" @bind-SelectedRows="selectedData" DataSource="directoryContents">
                <ColumnDefinitions Context="row">
                    <GenerateColumns HideColumnsByName="columnToHide" Definitions="@((n,c) => { c.Sortable = true; })"/>
                </ColumnDefinitions>
            </Table>
        }
    </div>

    <div class="visualSettingFileContent">
        @if (isPdf)
        {
            <embed src="@($"Library/{Path.GetFileName(selectedFilePath)}")" style="width: 100%; height: 100%;" />
        }
        else if (selectedFileContent != null)
        {
            <h4>Содержимое файла:</h4>
            <pre>@selectedFileContent</pre>
        }
    </div>
</div>

@code {
    private string? directoryPath = @"C:\Users\dok4s\source\repos\Biblioteka\Biblioteka\wwwroot\Library";
    private List<DirectoryItem> directoryContents;
    private string? selectedFileContent;
    private UploadFileItem? selectedFile;
    private string? selectedFilePath;
    private bool isPdf;
    private string? newFolderName;
    IEnumerable<DirectoryItem> selectedData = [];

    string[] columnToHide = ["IsDirectory"];

    protected override async Task OnInitializedAsync()
    {
        await LoadDirectory();
    }
    private void OnBack()
    {
        directoryPath = string.Join(@"\", directoryPath.Split(@"\").SkipLast(1)) + @"/";
        LoadDirectory();
    }
    private async Task LoadDirectory()
    {
        if (Directory.Exists(directoryPath))
        {
            directoryContents = Directory.GetFileSystemEntries(directoryPath)
                .Select(path => new FileInfo(path))
                .Select(info => new DirectoryItem
                {
                    Name = info.Name,
                    IsDirectory = info.Attributes.HasFlag(FileAttributes.Directory),
                    Size = info.Attributes.HasFlag(FileAttributes.Directory) ? "0" : FormatSize(info.Length),
                    LastModified = info.LastWriteTime
                }).ToList();
        }
        else
        {
            directoryContents = null;
        }
    }

    private async Task CreateNewFolder()
    {
        if (!string.IsNullOrEmpty(newFolderName))
        {
            Directory.CreateDirectory(Path.Combine(directoryPath, newFolderName));
            newFolderName = "";
            await LoadDirectory();
        }
    }
    public Stream OpenReadStream(string filePath)
    {
        return new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.Read);
    }
    private string FormatSize(long size)
    {
        string[] sizes = { "Б", "КБ", "МБ", "ГБ", "ТБ" };
        int order = 0;
        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }
        return $"{size:0.##} {sizes[order]}";
    }
    private async Task UploadFile()
    {
        if (selectedFile != null)
        {
            var filePath = Path.Combine(directoryPath, selectedFile.FileName);
            using (Stream stream = OpenReadStream(filePath))
            {
                using (StreamReader reader = new StreamReader(stream))
                {
                    string content = reader.ReadToEnd();
                }
                using var fileStream = new FileStream(filePath, FileMode.Create);
                await stream.CopyToAsync(fileStream);
            }
            await LoadDirectory();
        }
    }

    private async Task OnFileSelected(UploadInfo e)
    {
        selectedFile = e.File;
    }

    private Dictionary<string, object> OnRow(RowData<DirectoryItem> ditem) => new()
        {
            ["onclick"] = () =>
            {
                DirectoryItem item = ditem.Data;
                var fullPath = Path.Combine(directoryPath, item.Name);
                var extension = Path.GetExtension(item.Name).ToLower();

                if (item.IsDirectory)
                {
                    directoryPath = fullPath;
                    LoadDirectory();
                }
                else
                {
                    if (extension == ".txt")
                    {
                        isPdf = false;
                        selectedFileContent = File.ReadAllText(fullPath);
                    }
                    else if (extension == ".pdf")
                    {
                        selectedFilePath = fullPath;
                        isPdf = true;
                    }
                    else if (extension == ".docx")
                    {
                        isPdf = false;
                        selectedFileContent = ReadDocxContent(fullPath);
                    }
                }
                StateHasChanged();
            }
        };

    private string ReadDocxContent(string filePath)
    {
        using (var doc = Xceed.Words.NET.DocX.Load(filePath))
        {
            return string.Join("\n", doc.Paragraphs.Select(p => p.Text));
        }
    }
    
    private class DirectoryItem
    {
        [DisplayName("Имя")]
        public string Name { get; set; }
        public bool IsDirectory { get; set; }
        [DisplayName("Размер")]
        public string Size { get; set; }
        [DisplayName("Дата последнего изменения")]
        public DateTime LastModified { get; set; }
    }
}
